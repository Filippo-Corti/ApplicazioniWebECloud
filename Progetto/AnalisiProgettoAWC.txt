1) Analisi dei Requisiti
	Requisiti Funzionali
	Requisiti Non Funzionali
2) Identificazione delle Funzionalità da Sviluppare
	Descrivere meglio i Requisiti Funzionali e come si traducono nello Sviluppo (vedi "Operazioni da Svolgere")
3) Progettazione della Struttura e della Presentazione delle Pagine Web
	Descrizione della Directory di Lavoro
	Descrizione dell'HTML e CSS per mettere insieme la Struttura della Pagina (FIGMA)
4) Progettazione della Sorgente di Informazioni Statica o Dinamica
	Fetch dei Dati: API utilizzate
	Gestione del Local Storage & Session Storage
5) Implementazione dell'Applicazione Stessa
	Screenshot dell'Applicazione ...

Tutti i dati degli utenti possono andare in un json utenti, incluso i loro piatti preferiti e le ricette salvate nel ricettario personale (basta l'ID per entrambe le cose, poi il fetch meglio farlo in locale direttamente). Rettifica: per il ricettario personale ci vuole anche una nota oltre all'ID.

Le recensioni vanno in un altro json, con ID_MEAL + USER_EMAIL + data (per qualche motivo inserita dall'utente) + i due voti

Nel Session Storage va semplicemente l'email dell'utente collegato, se è collegato qualcuno.

Idee:
- Home Page con:
	- Piatti preferiti
	- Ricette salvate
	- Un elenco di categoria a caso
	- Un elenco di area (nazione) a caso

- Login con Termini e Condizioni d'Uso personalizzate?

- Pagine HTML da implementare:
	1) login
	2) registrazione
	3) home page
	4) profilo personale, con modifica dati e ricette preferite
	5) pagina di una ricetta
	6) pagina del proprio ricettario


Cose importanti:
- Considerare casi limite:
	Utente cancella account -> Cosa succede alle sue recensioni?
		> Utente "Anonimo" (così rimangono i dati)
		> Cancello recensioni
		> Segnalarlo nell'informativa
- Ogni piatto deve mostrare sia gusto che difficoltà


Tecnicismi:
- COLORI BOOTSTRAP? Solved
- MENU RESPONSIVE BOOTSTRAP? Solved
- CALL ALLE API? Solved
- MECCANISMO DI RECUPERO LISTA INGREDIENTI? Solved

Fonti:
https://lingtalfi.com/bootstrap4-color-generator
https://getbootstrap.com/docs/5.3/examples/navbars-offcanvas

-------------------------------------------------------------

EMAIL: CHECK IF EMAIL && CHECK IF UNIQUE
USERNAME: CHECK CHARSET?
PASSWORD: CHECK LENGTH + CHARACTERS + == TO PASSWORD2
CHECKBOX: CHECK IF CHECKED

-------------------------------------------------------------

Allo Startup (Home Page) vengono caricate:

- Tutte le categorie
- Tutte le aree
- Tutti gli ingredienti

- Tutte le ricette basate sui propri interessi, ovvero:
	- Ricette delle categorie piaciute
	- Ricette delle aree piaciute
	- Ricette con gli ingredienti piaciuti
	- Ricette salvate nel ricettario
- 15 ricette a caso, con random.php

Mentre le cose sopra vengono aggiornate solo se:
	- Ho aggiornato i miei interessi
	- Ho fatto logout (in questo caso si cancellano)
	- Ho fatto login (in questo caso si caricano)
	- Non ci sono nel local Storage (vale per categorie, aree e ingredienti)
le 15 ricette a caso vengono ricaricate tutte le volte

Per far sembrare i consigliati casuali, li posiziono in maniera random nello slider ogni volta

Tutte queste vengono salvate in un json application_data,
memorizzando sempre
> Per le ricette solo
	- strMeal
	- strMealThumbn
	- idMeal
> Per le categorie
	- strCategory
	- strCategoryDescription
> Per le aree 
	- strArea
> Per gli ingredienti
	- strIngredient	
	- strDescription

Dopodiché:
	1 Se apro una ricetta richiedo esplicitamente tutti i suoi dati
	2 Se faccio una ricerca:
		- Sto digitando la prima lettera? 
			Allora uso l'API apposita e carico RicetteCercate in memoria
		- Guardo tra le Aree, Categorie e Ingredienti e RicetteCercate
	3 Se clicco sul risultato della ricerca che è una ricetta, vedi punto 1
	4 Se clicco sul risultato della ricerca che è una delle altre 3 cose, vado alla pagina dei risultati
	5 Se faccio invio nella ricerca vado ancora alla pagina dei risultati
	
---------------------------------------------------------------------------

PER GLI UTENTI:

Nel local storage ho un array users, dove ogni utente ha
	- email
	- username (se non impostato = email prima della @)
	- password (!!! per il momento non cifrata)
	- interests:
		- areas (array di string)
		- categories (array di string)
		- ingredients (array di string)
	- cookbook (array di coppie id - note)

Verificare in fase di registrazione che l'email non sia già in uso

Nel login verificare credenziali

Mantenere nel Session Storage current_user (la sua email)

---------------------------------------------------------------------------

PER LE REVIEW:

Vengono memorizzate in una mappa con key = recipe_id e value array di recensioni.

Ogni recensione è:
- recipe_id (poi valutare se necessario) => sì è necessario
- email utente che l'ha creata
- content
- taste
- difficulty
- timestamp (better than date for uniqueness)







	